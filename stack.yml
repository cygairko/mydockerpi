version: '3.7'

networks:
  n_web:
    driver: bridge
  n_db:
    driver: bridge
  n_traefik_proxy:
    external: true
  n_traefik_proxy:
    external: true

volumes:
  v_postgres11:
    external: true
  v_redis:
    external: true
  v_nextcloud:
    external: true
  v_portainer:
    external: true

services:
  traefik:
    image: traefik:1.7-alpine
    container_name: traefik
    restart: always
    hostname: traefik
    networks:
      - default
      - n_traefik_proxy
    ports:
      - "80:80"
      - "443:443"
    labels:
      traefik.enable: "true"
      traefik.backend: "traefik"
      traefik.frontend.rule: "Host:traefik.${DOMAINNAME}"
      traefik.port: "8080"
      traefik.docker.network: "n_traefik_proxy"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/${USER}/mydockerpi/traefik/traefik.toml:/etc/traefik/traefik.toml
      - /home/${USER}/mydockerpi/traefik/acme.json:/etc/traefik/acme/acme.json
    command: --acme.domains="${DOMAINNAME}" \
             --acme.email="${ACME_EMAIL}" \
             --docker.domain="${DOMAINNAME}"

  portainer:
    image: portainer/portainer:linux-arm
    container_name: portainer
    restart: always
    networks:
      - n_traefik_proxy
    labels:
      traefik.enable: "true"
      traefik.backend: "portainer"
      traefik.frontend.rule: "Host:portainer.${DOMAINNAME}"
      traefik.docker.network: "n_traefik_proxy"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - v_portainer:/data

  watchtower:
    image: containrrr/watchtower:armhf-latest
    container_name: watchtower
    restart: always
    labels:
      traefik.enable: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup

  whoami:
    image: hypriot/rpi-whoami
    container_name: whoami
    restart: always
    networks:
      - n_traefik_proxy
    labels:
      traefik.enable: "true"
      traefik.backend: "whoami"
      traefik.frontend.rule: "Host:whoami.${DOMAINNAME}"
      traefik.docker.network: "n_traefik_proxy"

  postgres:
    image: postgres:11-alpine
    container_name: postgres
    restart: always
    networks:
      - n_db
    labels:
      traefik.enable: "false"
    volumes:
      - v_postgres11:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres

  redis:
    image: redis:5-alpine
    container_name: redis
    restart: always
    networks:
      - n_db
    labels:
      traefik.enable: "false"
    volumes:
      - v_redis:/data

  nextcloud:
    image: nextcloud:17-fpm-alpine
    container_name: nextcloud
    restart: always
    networks:
      - n_db
      - n_web
    labels:
      traefik.enable: "false"
    volumes:
      - v_nextcloud:/var/www/html
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=postgres
      - REDIS_HOST=redis
      - NEXTCLOUD_TRUSTED_DOMAINS=${DOMAINNAME}
    depends_on:
      - postgres
      - redis

  nginx_web:
    image: nginx:1-alpine
    container_name: nginx_web
    restart: always
    networks:
      - n_web
      - n_traefik_proxy
    labels:
      traefik.enable: "true"
      traefik.backend: "nextcloud"
      traefik.frontend.rule: "Host:${DOMAINNAME}"
      traefik.docker.network: "n_traefik_proxy"
      traefik.port: "80"
    volumes:
      - v_nextcloud:/var/www/html:ro
      - /home/${USER}/mydockerpi/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - nextcloud
